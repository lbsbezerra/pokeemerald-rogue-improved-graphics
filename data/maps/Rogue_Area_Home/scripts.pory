//const FLAG_BERRY_FIELD1 = FLAG_TEMP_1
//const FLAG_BERRY_FIELD2 = FLAG_TEMP_2
//const FLAG_FIELD_MON0 = FLAG_TEMP_3
//const FLAG_FIELD_MON1 = FLAG_TEMP_4
//const FLAG_FIELD_MON2 = FLAG_TEMP_5
//const FLAG_FIELD_MON3 = FLAG_TEMP_6

//const VAR_DECOR_ID = VAR_0x8004
const VAR_SELECT_REGION = VAR_0x8004

//const VAR_MENU_GROUP_CHOICE = VAR_TEMP_D
//const VAR_MENU_GROUP_PAGE = VAR_TEMP_E
//const VAR_DECOR_ID = VAR_TEMP_F


const MENU_DEPTH_CHOOSE_GROUP           = 0
const MENU_DEPTH_CHOOSE_DECOR           = 1
const MENU_DEPTH_CHOOSE_VARIANT         = 2
const MENU_DEPTH_PLACE_DECORATION       = 3

const VAR_MENU_DEPTH                    = VAR_TEMP_F
const VAR_SELECTED_GROUP                = VAR_TEMP_E
const VAR_SELECTED_DECOR_ID             = VAR_TEMP_D
const VAR_SELECTED_DECOR_VARIANT        = VAR_TEMP_C
const VAR_PREVIOUS_DECOR_INDEX          = VAR_TEMP_B

mapscripts Rogue_Area_Home_MapScripts 
{
    MAP_SCRIPT_ON_LOAD: Rogue_Area_Home_OnTransition
}

script Rogue_Area_Home_OnTransition
{
}

script Rogue_Area_Home_DecorateFromMenu
{
    lock

    if(var(VAR_ROGUE_SPECIAL_MODE) == ROGUE_SPECIAL_MODE_DECORATING)
    {
        setvar(VAR_ROGUE_SPECIAL_MODE, ROGUE_SPECIAL_MODE_NONE)
    }
    else
    {
        setvar(VAR_ROGUE_SPECIAL_MODE, ROGUE_SPECIAL_MODE_DECORATING)
    }

    special(ReloadWarpSilent)
    release
}


script Rogue_Area_Home_InteractWithWorkbench
{
    specialvar(VAR_RESULT, GetPlayerFacingDirection)
    if(var(VAR_RESULT) != DIR_SOUTH) // Can't interact from the top
    {
        lock

        special(Rogue_IsMultiplayerClient)
        if(var(VAR_RESULT) == YES)
        {
            lock
            msgbox(format("It's a workbench!\pIt's has a bunch of complicated designs and tools on top."))
            release
        }
        else
        {
            begindynamicmultichoice
            appenddynamicmultichoice("Build / Upgrade", 0)

            if(var(VAR_ROGUE_SPECIAL_MODE) == ROGUE_SPECIAL_MODE_DECORATING)
            {
                appenddynamicmultichoice("Stop Decorating", 1)
            }
            else
            {
                appenddynamicmultichoice("Start Decorating", 1)
            }
        
            hubupgradeunlocked(HUB_UPGRADE_HOME_EDIT_STYLE)
            if(var(VAR_RESULT) == YES)
            {
                appenddynamicmultichoice("Edit Styles", 2)
            }

            appenddynamicmultichoice("Clear Decorations", 3)
            appenddynamicmultichoice("Exit", MULTI_B_PRESSED)


            message(format("What would you like to do?"))
            waitmessage
            enddynamicmultichoice(1, 0, 6, TRUE)
        

            switch(var(VAR_RESULT))
            {
                case 0:
                    call(Rogue_Area_WorkbenchOptions)

                case 1:
                    if(var(VAR_ROGUE_SPECIAL_MODE) == ROGUE_SPECIAL_MODE_DECORATING)
                    {
                        setvar(VAR_ROGUE_SPECIAL_MODE, ROGUE_SPECIAL_MODE_NONE)
                    }
                    else
                    {
                        setvar(VAR_ROGUE_SPECIAL_MODE, ROGUE_SPECIAL_MODE_DECORATING)
                    }

                    special(ReloadWarpSilent)

                case 2:
                    call(Rogue_Area_Home_EditStyles)

                case 3:
                    msgbox(format("This will clear all currently placed decorations.\nThere is no way to undo this.\pAre you sure you want to clear all decorations?"), MSGBOX_YESNO)
                    if(var(VAR_RESULT) == YES)
                    {
                        special(RogueHub_ClearAllDecorations)
                        special(ReloadWarpSilent)
                    }
            }
        }

        release
    }
}

script Rogue_Area_Home_EditStyles
{
    begindynamicmultichoice

    appenddynamicmultichoice("Paths", 0)
    appenddynamicmultichoice("Base Exterior", 1)
    appenddynamicmultichoice("Base Interior", 2)
    appenddynamicmultichoice("Exit", MULTI_B_PRESSED)

    message(format("What style would you like to change?"))
    waitmessage
    enddynamicmultichoice(1, 0, 6, TRUE)
    
    switch(var(VAR_RESULT))
    {
        case 0:
            call(Rogue_Area_Home_EditPathStyles)

        case 1:
            call(Rogue_Area_Home_EditExteriorStyles)

        case 2:
            call(Rogue_Area_Home_EditInteriorStyles)
    }
}

script Rogue_Area_Home_EditPathStyles
{
    begindynamicmultichoice
    special(RogueHub_AppendChangeStyle_Paths)
    appenddynamicmultichoice("Exit", MULTI_B_PRESSED)

    message(format("What style would you like to use?"))
    waitmessage
    enddynamicmultichoice(1, 0, 6, TRUE)
    
    switch(var(VAR_RESULT))
    {
        default:
            special(RogueHub_HandleChangeStyle_Paths)
            special(ReloadWarpSilent)

        case MULTI_B_PRESSED:
            return
    }
}

script Rogue_Area_Home_EditExteriorStyles
{
    begindynamicmultichoice
    special(RogueHub_AppendChangeStyle_Exterior)
    appenddynamicmultichoice("Exit", MULTI_B_PRESSED)

    message(format("What style would you like to use?"))
    waitmessage
    enddynamicmultichoice(1, 0, 6, TRUE)
    
    switch(var(VAR_RESULT))
    {
        default:
            special(RogueHub_HandleChangeStyle_Exterior)
            special(ReloadWarpSilent)


        case MULTI_B_PRESSED:
            return
    }
}

script Rogue_Area_Home_EditInteriorStyles
{
    begindynamicmultichoice
    special(RogueHub_AppendChangeStyle_Interior)
    appenddynamicmultichoice("Exit", MULTI_B_PRESSED)

    message(format("What style would you like to use?"))
    waitmessage
    enddynamicmultichoice(1, 0, 6, TRUE)
    
    switch(var(VAR_RESULT))
    {
        default:
            special(RogueHub_HandleChangeStyle_Interior)
            special(ReloadWarpSilent)

        case MULTI_B_PRESSED:
            return
    }
}

script Rogue_Area_Home_ChooseDecoration
{
    lock

    //msgbox(format("Choose decor"))

    call(Rogue_Area_Home_ChooseDecoration_Internal)

    release
}

script Rogue_Area_Home_ChooseDecoration_Internal
{
    setvar(VAR_RESULT, YES)

    while(var(VAR_RESULT) == YES)
    {
        if(var(VAR_MENU_DEPTH) == MENU_DEPTH_PLACE_DECORATION)
        {
            call(Rogue_Area_Home_PlaceDecoration)
        }
        else
        {
            message(format("What would you like to place?"))
            waitmessage

            begindynamicmultichoice(48)
            special(RogueHub_SetupDecorationMultichoice)
            enddynamicmultichoice(20, 2, 5, TRUE)

            special(RogueHub_HandleDecorationMultichoiceResult)
        }
    }
}

script Rogue_Area_Home_PlaceDecoration
{
    specialvar(VAR_PREVIOUS_DECOR_INDEX, RogueHub_PlaceHomeDecor)

    if(var(VAR_PREVIOUS_DECOR_INDEX) == HOME_DECOR_CODE_NO_ROOM)
    {
        msgbox(format("The area cannot be decorated any more."))
        setvar(VAR_MENU_DEPTH, MENU_DEPTH_CHOOSE_GROUP)
        setvar(VAR_RESULT, NO)
    }
    elif(var(VAR_PREVIOUS_DECOR_INDEX) == HOME_DECOR_TOO_MANY_OBJECTS_NEAR || var(VAR_PREVIOUS_DECOR_INDEX) == HOME_DECOR_TOO_MANY_OF_TYPE || var(VAR_PREVIOUS_DECOR_INDEX) == HOME_DECOR_CODE_NOT_HERE)
    {
        begindynamicmultichoice
        appenddynamicmultichoice("Change Decor", 1)
        appenddynamicmultichoice("Exit", MULTI_B_PRESSED)

        if(var(VAR_PREVIOUS_DECOR_INDEX) == HOME_DECOR_TOO_MANY_OF_TYPE)
        {
            message(format("Reached limit for this type of Decor.\nCannot place any more in this area."))
        }
        elif(var(VAR_PREVIOUS_DECOR_INDEX) == HOME_DECOR_CODE_NOT_HERE)
        {
            message(format("Decor can't be placed here."))
        }
        else
        {
            message(format("Too many other Objects nearby.\nTry placing elsewhere."))
        }

        waitmessage

        enddynamicmultichoice(20, 6, 2, TRUE)

        switch(var(VAR_RESULT))
        {
            case 0: // place
                setvar(VAR_RESULT, NO)

            case 1: // change decor
                setvar(VAR_MENU_DEPTH, MENU_DEPTH_CHOOSE_VARIANT)
                setvar(VAR_RESULT, YES)

            case MULTI_B_PRESSED: // exit
                // without placing
                setvar(VAR_RESULT, NO)
        }
    }
    else
    {
        special(DrawWholeMapView)
        specialvar(VAR_0x8000, RogueHub_IsRemovingDecor)

        begindynamicmultichoice
        if(var(VAR_0x8000) == YES)
        {
            if(var(VAR_PREVIOUS_DECOR_INDEX) == HOME_DECOR_CANNOT_REMOVE)
            {
                appenddynamicmultichoice("Change Decor", 1)
                appenddynamicmultichoice("Exit", MULTI_B_PRESSED)

                message(format("There's nothing to remove here.\nWhat would you like to do?"))
                waitmessage

                enddynamicmultichoice(20, 6, 2, TRUE)
            }
            else
            {
                appenddynamicmultichoice("Remove This", 0)
                appenddynamicmultichoice("Change Decor", 1)
                appenddynamicmultichoice("Exit", MULTI_B_PRESSED)

                message(format("Would you like to remove this decor?"))
                waitmessage

                enddynamicmultichoice(20, 6, 3, TRUE)
            }
        }
        else
        {
            appenddynamicmultichoice("Place Here", 0)
            appenddynamicmultichoice("Change Decor", 1)
            appenddynamicmultichoice("Exit", MULTI_B_PRESSED)

            message(format("Would you like to place this here?"))
            waitmessage

            enddynamicmultichoice(20, 6, 3, TRUE)
        }

        switch(var(VAR_RESULT))
        {
            case 0: // place
                setvar(VAR_RESULT, NO)

            case 1: // change decor
                special(RogueHub_RemoveHomeDecor)
                special(DrawWholeMapView)
                setvar(VAR_MENU_DEPTH, MENU_DEPTH_CHOOSE_VARIANT)
                setvar(VAR_RESULT, YES)

            case MULTI_B_PRESSED: // exit
                // without placing
                special(RogueHub_RemoveHomeDecor)
                special(DrawWholeMapView)
                setvar(VAR_RESULT, NO)
        }
    }
}

script Rogue_Area_Home_ChangeClothes
{
    lock

    specialvar(VAR_RESULT, RoguePlayer_HandleEasterEggOutfitUnlocks)

    if(var(VAR_RESULT) == YES)
    {
        call(Rogue_Common_DisplayPopups)
    }

    message(format("What would you like to do?"))
    waitmessage

    multichoice(20, 6, MULTI_CHANGE_CLOTHES, NO)
    
    switch(var(VAR_RESULT))
    {
        case 0: // change outfit
            fadescreen(FADE_TO_BLACK)
            special(Special_ViewPlayerCustomisationMenu)
            waitstate

        case 1: // change name
            fadescreen(FADE_TO_BLACK)
            special(ChangePlayerNickname)
            waitstate

        // Fallthrough and exit
    }

    special(Rogue_FixPartyMonDetails)
    release
}

script Rogue_Area_Home_EnterBed
{
    lock

    message(format("What time would you like to wake up?"))
    waitmessage

    multichoice(21, 4, MULTI_SELECT_TIME, NO)

    // Copy season selection
    copyvar(VAR_0x8004, VAR_RESULT)
    setvar(VAR_0x8005, MULTI_B_PRESSED)

    if(var(VAR_RESULT) != MULTI_B_PRESSED)
    {
        message(format("Which season would you like to wake up in?"))
        waitmessage

        multichoice(21, 4, MULTI_SELECT_SEASON, NO)

        copyvar(VAR_0x8005, VAR_RESULT)
    }

    special(Rogue_SetTimeAndSeason)

    if(var(VAR_RESULT) == TRUE)
    {
        closemessage

        fadescreen(FADE_TO_BLACK)

        fadeoutbgm(1)
        playbgm(MUS_NONE, FALSE)
        delay(30)

        //playse(SE_M_GRASSWHISTLE)
        //waitse
        playse(SE_M_SNORE)
        waitse
        delay(50)

        special(ReloadWarpSilent)
    }

    release
}