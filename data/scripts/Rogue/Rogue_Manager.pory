const VAR_ITEM_INDEX = VAR_0x8000
const VAR_ITEM_ID_VAL = VAR_0x8001
const VAR_ITEM_AMOUNT = VAR_0x8002
const VAR_SHOP_DIFFICULTY = VAR_0x8000
const VAR_SHOP_RANDOM_IDX = VAR_TEMP_F

// Re-used scripts
//

script Rogue_GiveItem_Internal
{
    special(Rogue_DetermineItemPickupCount)
    finditem(VAR_ITEM_ID_VAL, VAR_ITEM_AMOUNT)
}

script Rogue_Common_DisplayPopups
{
    waitse
    waitfanfare
    closemessage
    special(Rogue_DisplayPopupsFromScript)
    waitstate
    return
}

script Rogue_Common_DisplaySkippablePopups
{
    waitse
    waitfanfare
    closemessage
    special(Rogue_DisplayPopupsFromScriptSkippable)
    waitstate
    return
}

script Rogue_Common_DisplayNewBadgePopup
{
    delay(10) // pause to let SE catch up
    call(Rogue_Common_DisplaySkippablePopups)
    
    delay(10) // pause to let SE catch up
    special(Popup_NewBadgeGet)
    call(Rogue_Common_DisplayPopups)
    return
}

script Rogue_Common_WaitForRogueAssistant
{
    special(Rogue_IsRogueAssistantConnected)
    if(var(VAR_RESULT) == NO)
    {
        callnative(ScriptMenu_ShowRogueAssistantNotice)

        message(format("Please connect Rogue Assistant… …\n{B_BUTTON} Cancel"))
        waitmessage

        callnative(Rogue_WaitForRogueAssistant)
        waitstate
        
        callnative(ScriptMenu_HideRogueAssistantNotice)

        call(Rogue_Common_DisplayPopups)
    }

    return
}

script Rogue_QuickSaveRun
{
    lockall

    msgbox(format("{COLOR RED}WARNING!\n{COLOR DARK_GRAY}You can only reload Quicksaves once.\pWhen the game next reloads, this Quicksave will be wiped."))

    special(Rogue_IsMultiplayerActive)
    if(var(VAR_RESULT) == YES)
    {
        msgbox(format("{COLOR RED}MULTIPLAYER WARNING!\n{COLOR DARK_GRAY}There is currently no method avaliable to rejoin a Multiplayer Adventure outside of {POKEMON_HUB}.\pIf you Quicksave now, you will have to play the remainder of this Adventure single player."))
    }

    call(Common_EventScript_SaveGame)

    if(var(VAR_RESULT) == YES)
    {
        fadescreen(FADE_TO_BLACK)
        delay(60)
        special(DoSoftReset)
    }

    releaseall
}

script Rogue_QuickSaveLoad
{
    // We can accidentally call this on successful run return
    lockall

    if(var(VAR_0x8004) == TRUE)
    {
        msgbox(format("Adventure has been reloaded.\pClearing temporary save entry…"))

        call(Common_EventScript_ForceSaveGame)
    }
    else
    {
        msgbox(format("This save has already been reloaded.\pRetiring from Adventure…"))
        call(Rogue_ReturnToHub)
    }

    releaseall
}

script Rogue_QuickSaveVersionWarning
{
    lockall

    setvar(VAR_RESULT, YES)
    while(var(VAR_RESULT) == YES)
    {
        msgbox(format("{COLOR RED}WARNING!\n{COLOR DARK_GRAY}Invalid Save Location Detected!\pWhen upgrading to a new patch, make sure to save in {POKEMON_HUB}, outside of an Adventure.\pPlease revert to the older patch and re-save in a valid location."))
    }

    releaseall
}

script Rogue_QuickSaveVersionUpdateMessage
{
    bufferstring(STR_VAR_1, gText_RogueVersion)
    bufferstring(STR_VAR_2, gText_RogueVersionPrefix)
    bufferstring(STR_VAR_3, gText_RogueVersionSuffix)

    if(flag(FLAG_ROGUE_PRE_RELEASE_COMPAT_WARNING))
    {
        msgbox(format("WARNING!\pThis save game was detected to have come from a pre-release patch version.\pIt is not recommended to continue using this save, as you may lock yourself out of new content.\pPlease restore a backup if possible."))
    }

    msgbox(format("Welcome to...\nEmerald Rogue {STR_VAR_2}!\p{STR_VAR_1} {STR_VAR_3}\pAlways remember to download from the official sources:\pPokeCommunity (posted by Pokabbie) or Discord\pFor guides, bug reporting and previews, feel free to join the official Discord:\phttps://rogue.discord.pokabbie.com"), MSGBOX_DEFAULT)
    msgbox(format("I hope you enjoy Emerald Rogue!"), MSGBOX_DEFAULT)
}

script Rogue_Debug_SetWeather
{
    lock

    begindynamicmultichoice(24)
    appenddynamicmultichoice("None", WEATHER_NONE)
    appenddynamicmultichoice("Sunny", WEATHER_SUNNY)
    appenddynamicmultichoice("Drought", WEATHER_DROUGHT)
    appenddynamicmultichoice("Rain", WEATHER_RAIN)
    appenddynamicmultichoice("Rain Thunder", WEATHER_RAIN_THUNDERSTORM)
    appenddynamicmultichoice("Downpour", WEATHER_DOWNPOUR)
    appenddynamicmultichoice("Snow", WEATHER_SNOW)
    appenddynamicmultichoice("Sandstorm", WEATHER_SANDSTORM)
    appenddynamicmultichoice("Psychic Fog", WEATHER_PSYCHIC_FOG)
    appenddynamicmultichoice("Misty Fog", WEATHER_MISTY_FOG)
    appenddynamicmultichoice("Leaves", WEATHER_LEAVES)

    appenddynamicmultichoice("Sunny Clouds", WEATHER_SUNNY_CLOUDS)
    appenddynamicmultichoice("Volcanic Ash", WEATHER_VOLCANIC_ASH)
    appenddynamicmultichoice("Under Water", WEATHER_UNDERWATER)
    appenddynamicmultichoice("Under Water Bubbles", WEATHER_UNDERWATER_BUBBLES)
    appenddynamicmultichoice("Shade", WEATHER_SHADE)

    message(format("Which Weather?"))
    waitmessage
    enddynamicmultichoice(1, 0, 6, TRUE)

    if(var(VAR_RESULT) != MULTI_B_PRESSED)
    {
        setweather(VAR_RESULT)
        doweather
        setweather(VAR_RESULT)
        if(var(VAR_ROGUE_DESIRED_WEATHER) != WEATHER_NONE)
        {
            setweather(VAR_RESULT)
            doweather
        }
    }

    release
}

script Rogue_Debug_ChangeOutfit
{
    call(Rogue_Interior_Home_ChangeClothes)
}

script Rogue_Debug_RandomTradeTeam
{
    lock
    setvar(VAR_0x8004, 255)
    fadescreen(FADE_TO_BLACK)
    call(Rogue_ScriptHideFollower)
    playfanfare(MUS_MOVE_DELETED)
    special(Rogue_RandomisePartyMon)
    waitfanfare
    fadescreen(FADE_FROM_BLACK)
    call(Rogue_ScriptShowFollower)
    release
}


script Rogue_NewGameVersionUpdate
{
    lockall

    call(Rogue_QuickSaveVersionUpdateMessage)

    releaseall
}

script Rogue_QuickSaveVersionUpdate
{
    lock

    fadescreen(FADE_TO_BLACK)
    call(Rogue_QuickSaveVersionUpdateMessage)
    warp(MAP_ROGUE_AREA_TOWN_SQUARE, 10)

    release
}

script Rogue_ForceNicknameMon
{
    lock
    setvar(VAR_0x8004, 0)
    call(Common_EventScript_NameReceivedPartyMon)
    release
}

script Rogue_AskNicknameMon
{
    lock

    bufferspeciesname(STR_VAR_1, VAR_STARTER_SWAP_SPECIES)
    msgbox(format("Give {STR_VAR_1} a nickname?"), MSGBOX_YESNO)

    if(var(VAR_RESULT) == YES)
    {
        setvar(VAR_0x8004, 0)
        call(Common_EventScript_NameReceivedPartyMon)
    }

    release
}

script Rogue_RetireFromRun
{
    lockall
    msgbox(format("Are you sure you'd like to abandon the Adventure and return to {POKEMON_HUB}?"), MSGBOX_YESNO)

    if(var(VAR_RESULT) == YES)
    {
        call(Rogue_ReturnToHub)
    }

    releaseall
}

script Rogue_ReturnToHub
{
    warprespawn
    waitstate
    return
}

script Rogue_InteractWithQuestBoard
{
    lockall

    if(var(VAR_ROGUE_INTRO_STATE) <= ROGUE_INTRO_STATE_COLLECT_QUEST_LOG)
    {
        msgbox(format("It's a board filled with all sort of requests!"))
    }
    else
    {
        specialvar(VAR_RESULT, GetPlayerFacingDirection)
        if(var(VAR_RESULT) == DIR_NORTH)
        {
            call(Rogue_InteractWithQuestBoardInternal)
        }
        else
        {
            msgbox(format("It's the Quest Board!\pShame you can't read the postings from this side…"))
        }
    }

    releaseall
}

script Rogue_InteractWithQuestBoardInternal
{
    special(Rogue_HasPendingQuestRewards)

    if(var(VAR_RESULT) == 1)
    {
        msgbox(format("There's Quest rewards to collect!"))

        //fadeoutbgm(1)
        //delay(1)

        setvar(VAR_0x8004, 0)
        setvar(VAR_RESULT, 1)

        while(var(VAR_RESULT) == 1)
        {
            special(Rogue_QuestCollectNextReward)

            switch(var(VAR_RESULT))
            {
                //case 0:
                //    msgbox(format("finished."))

                case 1:
                    setvar(VAR_0x8004, 1) // flag that we've collected some results

                case 2:
                    msgbox(format("Unable to collect the remaining rewards."))
            }
        }

        call(Rogue_Common_DisplaySkippablePopups)

        //fadeinbgm(1)
        //delay(1)

        waitfanfare
        waitse

        special(Rogue_HasAnyNewQuests)
        if(var(VAR_RESULT) == 1)
        {
            msgbox(format("New Quests have been posted!"))
            special(Rogue_ShowNewQuests)
            waitstate
        }
        elif (var(VAR_0x8004) == 1)
        {
            msgbox(format("All rewards have been collected!"))
        }
        else
        {
            msgbox(format("There are no New Quests or Rewards to collect."))
        }
    }
    else
    {
        msgbox(format("There are no New Quests or Rewards to collect."))
    }
}

script Rogue_InteractWithPC
{
    if(flag(FLAG_SYS_POKEMON_GET))
    {
        specialvar(VAR_RESULT, GetPlayerFacingDirection)
        if(var(VAR_RESULT) == DIR_NORTH)
        {
            goto(EventScript_PC)
        }
        else
        {
            lock
            msgbox(format("It's a PC!\pShame you can't see the screen from this side…"))
            release
        }
    }
    else
    {
        lock
        msgbox(format("It's a PC!\pProbably best not to touch it for now…"))
        release
    }
}

script Rogue_EventScript_ItemUseHealingFlask
{
    lock

    if(flag(FLAG_ROGUE_RUN_ACTIVE))
    {
        copyvar(VAR_0x8004, VAR_ROGUE_FLASK_HEALS_MAX)
        subvar(VAR_0x8004, VAR_ROGUE_FLASK_HEALS_USED)

        buffernumberstring(STR_VAR_1, VAR_0x8004)

        if(var(VAR_ROGUE_FLASK_HEALS_USED) < VAR_ROGUE_FLASK_HEALS_MAX)
        {
            msgbox("The flask has {STR_VAR_1} uses remaining.\nWould you like to heal?", MSGBOX_YESNO)

            if(var(VAR_RESULT) == YES)
            {
                //playse(SE_SHOP)
                //special(HealPlayerParty)
                addvar(VAR_ROGUE_FLASK_HEALS_USED, 1)
                call(Common_EventScript_OutOfCenterPartyHeal)
                
                copyvar(VAR_0x8004, VAR_ROGUE_FLASK_HEALS_MAX)
                subvar(VAR_0x8004, VAR_ROGUE_FLASK_HEALS_USED)

                buffernumberstring(STR_VAR_1, VAR_0x8004)
                msgbox("The flask has {STR_VAR_1} uses remaining.", MSGBOX_DEFAULT)
            }
        }
        else
        {
            msgbox("The flask has {STR_VAR_1} uses remaining.", MSGBOX_DEFAULT)
        }
    }
    else
    {
        buffernumberstring(STR_VAR_1, VAR_ROGUE_FLASK_HEALS_MAX)
        msgbox("The flask has {STR_VAR_1} total uses.", MSGBOX_DEFAULT)
    }

    release
}

script Rogue_EventScript_ScatterPokeblockItem
{
    bufferitemname(STR_VAR_1, VAR_ITEM_ID)
    copyvar(VAR_ROGUE_ACTIVE_POKEBLOCK, VAR_ITEM_ID)

    special(Rogue_IsNearHoneyTree)

    if(var(VAR_RESULT) == YES)
    {
        special(Rogue_TryScatterPokeblockNearHoneyTree)

        if(var(VAR_RESULT) == 2)
        {
                msgbox(format("{STR_VAR_1} was already scattered by the Honey Tree…"))
        }
        elif(var(VAR_RESULT) == 1)
        {
            //while(var(VAR_RESULT) == YES)
            //{
                removeitem(VAR_ITEM_ID)
                playse(SE_REPEL)
                waitse

                msgbox(format("The {STR_VAR_1} was scattered by the Honey Tree…"))

                //checkitem(VAR_ROGUE_ACTIVE_POKEBLOCK)
                //if(var(VAR_RESULT) == YES)
                //{
                //    msgbox(format("Would you like to scatter another?"), MSGBOX_YESNO)
                //    if(var(VAR_RESULT) == YES)
                //    {
                //        removeitem(VAR_ROGUE_ACTIVE_POKEBLOCK)
                //        special(Rogue_TryScatterPokeblockNearHoneyTree)
                //    }
                //}
            //}
        }
        else
        {
            msgbox(format("The {STR_VAR_1} can't be scattered by the Honey Tree…"))
        }
    }
    else
    {
        removeitem(VAR_ITEM_ID)

        playse(SE_REPEL)
        special(Rogue_ScatterPokeblockItem)
        waitse

        if(var(VAR_RESULT) == YES)
        {
            msgbox(format("The {STR_VAR_1} was scattered…\pThe Pokémon seem to enjoy it!"))
        }
        else
        {
            msgbox(format("The {STR_VAR_1} was scattered…\pThe Pokémon don't seem interested in it…"))
        }
    }
}

script Rogue_EventScript_UsePokeblockItem
{
    lock
    call(Rogue_EventScript_ScatterPokeblockItem)
    release
}

script Rogue_EventScript_UseDayCarePhoneItem
{
    lock

    if(!flag(FLAG_ROGUE_RUN_ACTIVE))
    {
        // Can call unlimited times in hub
        setflag(FLAG_ROGUE_DAYCARE_PHONE_CHARGED)
    }

    if(flag(FLAG_ROGUE_DAYCARE_PHONE_CHARGED))
    {
        playse(SE_POKENAV_CALL)
        message(format("{PAUSE 20}… {PAUSE 20}… {PAUSE 20}… {PAUSE 20}"))
        waitse
        waitmessage
        closemessage


        if(!flag(FLAG_ROGUE_RUN_ACTIVE))
        {
            msgbox(format("{PLAYER}? Is that you?\pThe signal is so good in {POKEMON_HUB}!\pYou'd like to swap out one of your Pokémon, would you?"))
        }
        else
        {
            msgbox(format("{PLAYER}? Is that you?\pYou'd like to swap out one of your Pokémon, would you?"))
        }

        message(format("Which {PKMN} slot are you interested in?"))
        waitmessage

        multichoice(1, 1, MULTI_ROGUE_DAYCARE, NO)

        switch(var(VAR_RESULT))
        {
            case MULTI_B_PRESSED:
                setvar(VAR_RESULT, NO)

            default:
                copyvar(VAR_0x8005, VAR_RESULT)
                call(Rogue_EventScript_UseDayCarePhoneItem_TrySwapMon)
        }

        playse(SE_POKENAV_HANG_UP)
        waitse
    }
    else
    {
        msgbox(format("The Pokégear is out of charge.\pEntering any Rest Stop will recharge the Pokégear."))
    }

    release
}

script Rogue_EventScript_UseDayCarePhoneItem_TrySwapMon
{
    special(Rogue_IsDaycareSlotEmpty)
    if(var(VAR_RESULT) == YES)
    {
        specialvar(VAR_TEMP_0, CalculatePlayerPartyCount)

        if(var(VAR_TEMP_0) == 1)
        {
            msgbox(format("I'm afraid you can't leave any more Pokémon with the Day Care at the moment.\pIf you did, you'd be left with no Pokémon in your party!"), MSGBOX_DEFAULT)
        }
        else
        {
            msgbox(format("Which Pokémon would you like to leave with us?"), MSGBOX_DEFAULT)
            fadescreen(FADE_TO_BLACK)
            special(ChooseSendDaycareMon)
            waitstate

            if(var(VAR_0x8004) != PARTY_NOTHING_CHOSEN)
            {
                if(var(VAR_0x8004) == 0)
                {
                    call(Rogue_ScriptHideFollower)
                }

                special(Rogue_SwapDaycareMon)

                if(var(VAR_0x8004) == 0)
                {
                    call(Rogue_ScriptShowFollower)
                }
                msgbox(format("I'll make sure to take good care of them!\pSee you in a moment."), MSGBOX_DEFAULT)

                fadescreen(FADE_TO_BLACK)
                playse(SE_WARP_OUT)
                waitse

                closemessage
                fadescreen(FADE_FROM_BLACK)
                clearflag(FLAG_ROGUE_DAYCARE_PHONE_CHARGED)
            }
        }
    }
    else
    {
        specialvar(VAR_TEMP_0, CalculatePlayerPartyCount)
        specialvar(VAR_TEMP_1, Rogue_CalcMaxPartySize)
        
        if(var(VAR_TEMP_0) >= VAR_TEMP_1)
        {
            msgbox(format("So you would like to withdraw your Pokémon?\pIt looks like your party is full!\pYou'll need to leave a member of your party with me, in order to withdraw any Pokémon."))
            fadescreen(FADE_TO_BLACK)
            special(ChooseSendDaycareMon)
            waitstate

            if(var(VAR_0x8004) != PARTY_NOTHING_CHOSEN)
            {
                if(var(VAR_0x8004) == 0)
                {
                    call(Rogue_ScriptHideFollower)
                }

                special(Rogue_SwapDaycareMon)

                if(var(VAR_0x8004) == 0)
                {
                    call(Rogue_ScriptShowFollower)
                }
                msgbox(format("I'll make sure to take good care of them!\pSee you in a moment."), MSGBOX_DEFAULT)

                fadescreen(FADE_TO_BLACK)
                playse(SE_WARP_OUT)
                waitse

                closemessage
                fadescreen(FADE_FROM_BLACK)
                clearflag(FLAG_ROGUE_DAYCARE_PHONE_CHARGED)
            }
        }
        else
        {
            msgbox(format("So you would like to withdraw your Pokémon?"), MSGBOX_YESNO)

            if(var(VAR_RESULT) == YES)
            {
                setvar(VAR_0x8004, 5)
                special(Rogue_SwapDaycareMon)
                msgbox(format("See you in a moment."), MSGBOX_DEFAULT)

                fadescreen(FADE_TO_BLACK)
                playse(SE_WARP_OUT)
                waitse

                closemessage
                fadescreen(FADE_FROM_BLACK)
                clearflag(FLAG_ROGUE_DAYCARE_PHONE_CHARGED)
            }
        }
    }
}

script Rogue_EventScript_UseGoldenSeedItem
{
    lock

    if(flag(FLAG_ROGUE_RUN_ACTIVE))
    {

    }
    else
    {
        msgbox(format("It has have no effect, outside of Adventures."))
    }

    release
}

script Rogue_EventScript_AttemptSnagBattle
{
    lock

    clearflag(FLAG_ROGUE_IN_SNAG_BATTLE)
    msgbox(format("Would you like to try to snag the {STR_VAR_1}?"), MSGBOX_YESNO)

    if(var(VAR_RESULT) == YES)
    {
        setflag(FLAG_ROGUE_IN_SNAG_BATTLE)

        playmoncry(VAR_0x800B, CRY_MODE_ENCOUNTER)
        waitmoncry

        seteventmon(VAR_0x800B, 1, ITEMS_COUNT)

        special(BattleSetup_StartLegendaryBattle)
        waitstate
    }

    release
}

script Rogue_EventScript_AttemptPostGymHeal
{
    // Don't heal if we're in the healing flask mode
    checkitem(ITEM_HEALING_FLASK)
    if(var(VAR_RESULT) == NO)
    {
        special(Rogue_HealAlivePlayerParty)
    }
}

script Rogue_EventScript_AttemptPostRivalHeal
{
    // Don't heal if we're in the healing flask mode
    checkitem(ITEM_HEALING_FLASK)
    if(var(VAR_RESULT) == NO)
    {
        special(Rogue_HealAlivePlayerParty)
    }
}

script Rogue_EventScript_AttemptTeamBossHeal
{
    // Don't heal if we're in the healing flask mode
    checkitem(ITEM_HEALING_FLASK)
    if(var(VAR_RESULT) == NO)
    {
        special(Rogue_HealAlivePlayerParty)
    }
}

script Rogue_EventScript_AttemptNurseHeal
{
    call(Common_EventScript_OutOfCenterPartyHeal)
    setvar(VAR_ROGUE_FLASK_HEALS_USED, 0)
}

script Rogue_SetDesiredWeather
{
    if(var(VAR_ROGUE_DESIRED_WEATHER) != WEATHER_NONE)
    {
        setweather(VAR_ROGUE_DESIRED_WEATHER)
        doweather
    }
}

script Rogue_ClearWeather
{
    setweather(WEATHER_NONE)
    doweather
}

// Movement
//
script Rogue_Common_TurnPlayerNorth
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_NORTH)
    end
}
script Rogue_Common_TurnPlayerSouth
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_SOUTH)
    end
}
script Rogue_Common_TurnPlayerEast
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_EAST)
    end
}
script Rogue_Common_TurnPlayerWest
{
    turnobject(OBJ_EVENT_ID_PLAYER, DIR_WEST)
    end
}

// Shops
//

script Rogue_Shop_GetRandomIndex
{
    if(var(VAR_SHOP_RANDOM_IDX) == 0)
    {
        random(5)
        addvar(VAR_RESULT, 1)
        copyvar(VAR_SHOP_RANDOM_IDX, VAR_RESULT)
    }
    else
    {
        copyvar(VAR_RESULT, VAR_SHOP_RANDOM_IDX)
    }
}

script Rogue_Shop_Balls
{    
    lock
    faceplayer
    message("Welcome to the Poké Ball Shop!")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_BALLS)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_Medicine
{    
    lock
    faceplayer
    message("Welcome to the General Shop!")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_GENERAL)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_TMs
{
    lock
    faceplayer
    message("Welcome to the TM Shop!")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_TMS)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_BattleEnhancers
{
    lock
    faceplayer
    message("Welcome to the Travelling Battle Shop!\nI stock Enhancement Items.")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_BATTLE_ENHANCERS)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_HeldItems
{
    lock
    faceplayer
    message("Welcome to the Travelling Battle Shop!\nI stock Held Items.")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_HELD_ITEMS)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_RareHeldItems
{
    lock
    faceplayer
    message("Welcome to the Travelling Battle Shop!\nI stock Special Items.")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_RARE_HELD_ITEMS)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_RarePlates
{
    lock
    faceplayer
    message("Welcome to the Travelling Battle Shop!\nI stock Quest Reward Items.")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_QUEST_REWARDS)

    msgbox("Come again soon!")
    release
}

script Rogue_Shop_Curses
{
    lock
    faceplayer

    msgbox(format("Good day, {PLAYER}.\pI can offer you some Curses to add some extra challenge in your future Adventures, if you'd like."), MSGBOX_DEFAULT)

    msgbox(format("Would you like me to remove any active Curses?"), MSGBOX_YESNO)
    if(var(VAR_RESULT) == YES)
    {
        playse(SE_SHOP)
        special(Rogue_ClearCurses)
    }

    message(format("Which Curses would you like to take with you?"))
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_CURSES)

    msgbox(format("Good luck child, {PLAYER}!"), MSGBOX_DEFAULT)

    release
}

script Rogue_Shop_Charms
{
    lock
    faceplayer

    msgbox(format("Greetings, {PLAYER}.\pI can offer you some Charms to customise your Adventures, if you'd like.\pHowever, starting an Adventure with any of these Charms will enter a sort of 'Sandbox' mode.\pAs a result, all Quests will be disabled."), MSGBOX_DEFAULT)

    msgbox(format("Would you like me to remove any active Charms?"), MSGBOX_YESNO)
    if(var(VAR_RESULT) == YES)
    {
        playse(SE_SHOP)
        special(Rogue_ClearCharms)
    }

    message(format("Which Charms would you like to take with you?"))
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_CHARMS)

    msgbox(format("Have fun, {PLAYER}!"), MSGBOX_DEFAULT)

    release
}

script Rogue_Shop_Berries
{    
    lock
    faceplayer
    message("Welcome!\nWould you like to buy some berries?")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_BERRIES)
    lock

    msgbox("Please come again!")
    release
}

script Rogue_Shop_Treats
{    
    lock
    faceplayer
    message("Hi there!\nWould you like to buy some treats?")
    waitmessage

    rogue_dynamicpokemart(ROGUE_SHOP_TREATS)

    msgbox("Please come again!")
    release
}

script RogueSafari_Sign_South
{
    if(flag(FLAG_ROGUE_EXPANSION_ACTIVE))
    {
        msgbox(format("SOUTH AREA home to:\nNORMAL, FIGHTING, FAIRY Pokémon"), MSGBOX_SIGN)
    }
    else
    {
        msgbox(format("SOUTH AREA home to:\nNORMAL, FIGHTING Pokémon"), MSGBOX_SIGN)
    }
}

script RogueSafari_Sign_SouthWest
{
    msgbox(format("SOUTH WEST AREA home to:\nGRASS, POISON, DARK Pokémon"), MSGBOX_SIGN)
}

script RogueSafari_Sign_NorthWest
{
    msgbox(format("NORTH WEST AREA home to:\nDRAGON, STEEL, PSYCHIC Pokémon"), MSGBOX_SIGN)
}

script RogueSafari_Sign_North
{
    msgbox(format("NORTH AREA home to:\nFLYING, GHOST, FIRE Pokémon"), MSGBOX_SIGN)
}

script RogueSafari_Sign_NorthEast
{
    msgbox(format("NORTH EAST AREA home to:\nROCK, GROUND, ELECTRIC Pokémon"), MSGBOX_SIGN)
}

script RogueSafari_Sign_SouthEast
{
    msgbox(format("SOUTH EAST AREA home to:\nWATER, BUG, ICE Pokémon"), MSGBOX_SIGN)
}


// Tutors
//
script Rogue_Tutor_MoveRelearn
{
    lock
    faceplayer
    msgbox(format("Lvl Move tutor deprecated"), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_EggMoveLearn
{
    lock
    faceplayer
    msgbox(format("Egg tutor deprecated"), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_TutorMoveLearn
{
    special(TeachMoveSetContextTutorMove)
    lock
    faceplayer
    msgbox(format("HYAH!\p I'm a Move Tutor!\p I can teach Pokémon moves some radical moves!\pSo, what do you want me to teach?"), MSGBOX_DEFAULT)

    setvar(VAR_0x8004, 0)
    special(TeachMoveFromContext)
    waitstate

    release
}

script Rogue_Tutor_MoveDelete
{
    lock
    faceplayer
    msgbox(format("Uh..\nOh, yes, I'm the Move Deleter.\pI can make Pokémon forget their moves, if you'd like?"), MSGBOX_YESNO)

    if(var(VAR_RESULT) == NO)
    {
        goto(Rogue_Tutor_MoveDeleteCancel)
    }

    special(ChoosePartyMon)
    waitstate
    if(var(VAR_0x8004) == PARTY_NOTHING_CHOSEN)
    {
        goto(Rogue_Tutor_MoveDeleteCancel)
    }

    special(IsSelectedMonEgg)
    if(var(VAR_RESULT) == TRUE)
    {
        goto(Rogue_Tutor_MoveDeleteEgg)
    }

    special(GetNumMovesSelectedMonHas)
    if(var(VAR_RESULT) <= 1)
    {
        goto(Rogue_Tutor_MoveDeleteNoMoves)
    }

    fadescreen(FADE_TO_BLACK)
    special(MoveDeleterChooseMoveToForget)
    fadescreen(FADE_FROM_BLACK)

    if(var(VAR_0x8005) == MAX_MON_MOVES)
    {
        goto(Rogue_Tutor_MoveDeleteCancel)
    }

    special(MoveDeleterForgetMove)
    playfanfare(MUS_MOVE_DELETED)
    waitfanfare

    release
}

script Rogue_SpeakDaycareLady
{
    lock
    faceplayer
    msgbox(format("Why hello dear!\nI'm the Day Care Lady.\pI can hold onto Pokémon for you, if you'd like."), MSGBOX_DEFAULT)

    message(format("Which {PKMN} slot are you interested in?"))
    waitmessage

    multichoice(1, 1, MULTI_ROGUE_DAYCARE, NO)

    switch(var(VAR_RESULT))
    {
        case MULTI_B_PRESSED:
            setvar(VAR_RESULT, NO)

        default:
            copyvar(VAR_0x8005, VAR_RESULT)
            call(Rogue_SpeakDaycareLady_TrySwapMon)
    }

    release
}

script Rogue_SpeakDaycareLady_TrySwapMon
{
    special(Rogue_IsDaycareSlotEmpty)
    if(var(VAR_RESULT) == YES)
    {
        setvar(VAR_RESULT, NO)
        specialvar(VAR_TEMP_0, CalculatePlayerPartyCount)

        if(var(VAR_TEMP_0) == 1)
        {
            msgbox(format("I'm afraid you can't leave any more Pokémon with me at the moment.\pIf you did, you'd be left with no Pokémon in your party!"), MSGBOX_DEFAULT)
        }
        else
        {
            msgbox(format("Which Pokémon would you like to leave with me?"), MSGBOX_DEFAULT)
            fadescreen(FADE_TO_BLACK)
            special(ChooseSendDaycareMon)
            waitstate

            if(var(VAR_0x8004) != PARTY_NOTHING_CHOSEN)
            {
                if(var(VAR_0x8004) == 0)
                {
                    call(Rogue_ScriptHideFollower)
                }

                special(Rogue_SwapDaycareMon)

                if(var(VAR_0x8004) == 0)
                {
                    call(Rogue_ScriptShowFollower)
                }
                msgbox(format("I'll make sure to take good care of them!\pTake care!"), MSGBOX_DEFAULT)
                setvar(VAR_RESULT, YES)
            }
        }
    }
    else
    {
        setvar(VAR_RESULT, NO)

        specialvar(VAR_TEMP_0, CalculatePlayerPartyCount)
        specialvar(VAR_TEMP_1, Rogue_CalcMaxPartySize)
        
        if(var(VAR_TEMP_0) >= VAR_TEMP_1)
        {
            msgbox(format("So you would like to withdraw your Pokémon?\pIt looks like your party is full!\pYou'll need to leave a member of your party with me, in order to withdraw any Pokémon."))
            fadescreen(FADE_TO_BLACK)
            special(ChooseSendDaycareMon)
            waitstate

            if(var(VAR_0x8004) != PARTY_NOTHING_CHOSEN)
            {
                if(var(VAR_0x8004) == 0)
                {
                    call(Rogue_ScriptHideFollower)
                }

                special(Rogue_SwapDaycareMon)

                if(var(VAR_0x8004) == 0)
                {
                    call(Rogue_ScriptShowFollower)
                }
                msgbox(format("I'll make sure to take good care of them!\pTake care!"), MSGBOX_DEFAULT)
                setvar(VAR_RESULT, YES)
            }
        }
        else
        {
            msgbox(format("So you would like to withdraw your Pokémon?"), MSGBOX_YESNO)

            if(var(VAR_RESULT) == YES)
            {
                setvar(VAR_0x8004, 5)
                special(Rogue_SwapDaycareMon)
                msgbox(format("There you are!\pTake care!"), MSGBOX_DEFAULT)
            }
        }
    }
}

script Rogue_Tutor_MoveDeleteNoMoves
{
    msgbox(format("This Pokémon needs move moves before I can make it forget any."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_MoveDeleteEgg
{
    msgbox(format("As much as wish I could..\nI can't unteach an EGG."), MSGBOX_DEFAULT)
    release
}

script Rogue_Tutor_MoveDeleteCancel
{
    msgbox(format("Oh.. OK then."), MSGBOX_DEFAULT)
    release
}

script Rogue_BerryTree_CheckSoil
{
    special(Rogue_CanPlantBerries)

    if(var(VAR_RESULT) == TRUE)
    {
        goto(BerryTree_EventScript_CheckSoil)
    }
    return
}

script Rogue_BerryTree_WantToPlant
{
    // Quick replant mode
    if(var(VAR_ROGUE_SPECIAL_MODE) == ROGUE_SPECIAL_MODE_PLANTING)
    {
        if(var(VAR_ITEM_ID) >= FIRST_BERRY_INDEX && var(VAR_ITEM_ID) <= LAST_BERRY_INDEX)
        {
            checkitem(VAR_ITEM_ID)
            if(var(VAR_RESULT) == YES)
            {
                bufferitemname(STR_VAR_1, VAR_ITEM_ID)
                msgbox(format("Plant {STR_VAR_1}?"), MSGBOX_YESNO)
                
                if(var(VAR_RESULT) == YES)
                {
                    removeitem(VAR_ITEM_ID)
                    call(Rogue_BerryTree_PlantBerry)
                    release
                    end
                }
            }
        }

        setvar(VAR_ROGUE_SPECIAL_MODE, ROGUE_SPECIAL_MODE_NONE)
    }

    goto(BerryTree_EventScript_WantToPlant)
    end
}

script Rogue_BerryTree_PlantBerry
{
    setvar(VAR_ROGUE_SPECIAL_MODE, ROGUE_SPECIAL_MODE_PLANTING)

    goto(BerryTree_EventScript_PlantBerry)
    return
}

script Rogue_BerryTree_PickedUpBerry
{
    //if(!flag(FLAG_ROGUE_RUN_ACTIVE))
    //{
    //    waitfanfare
    //}
    return
}

// Trainer Blocks
//
script Rogue_Battle_PreBoss
{
    lock
    faceplayer

    special(Rogue_CanOverLevel)
    if(var(VAR_RESULT) == YES)
    {
        clearflag(FLAG_TEMP_1A)
    }

    if(flag(FLAG_TEMP_1A))
    {
        msgbox(format("Good luck with your Adventure!"), MSGBOX_DEFAULT)
    }
    else
    {
        buffernumberstring(STR_VAR_1, VAR_ROGUE_CURRENT_LEVEL_CAP)
        msgbox(format("I can help you level up if you'd like.\p{LV}{STR_VAR_1} is the current cap.\nWould you like to battle?"), MSGBOX_YESNO)

        if(var(VAR_RESULT) == YES)
        {
            trainerbattle(TRAINER_BATTLE_SINGLE_NO_INTRO_TEXT, TRAINER_ROGUE_DYNAMIC, 0, gPlaceholder_Trainer_PostBattleTaunt)
            setflag(FLAG_TEMP_1A)
        }
        else
        {
            msgbox(format("Let me know if you change your mind."), MSGBOX_DEFAULT)
        }
    }

    release
}

script Rogue_Heal_PreBoss
{
    lock
    faceplayer

    msgbox(format("Urgh...\nYou want me to heal you or something?"), MSGBOX_DEFAULT)

    if(flag(FLAG_ROGUE_FREE_HEAL_USED))
    {
        showmoneybox(0, 0)

        switch(var(VAR_ROGUE_DIFFICULTY))
        {
            case 0:
                checkconstantmoney(1000)
                bufferconstantnumberstring(STR_VAR_1, 1000)
            case 1:
                checkconstantmoney(2000)
                bufferconstantnumberstring(STR_VAR_1, 2000)
            case 2:
                checkconstantmoney(4000)
                bufferconstantnumberstring(STR_VAR_1, 4000)
            case 3:
                checkconstantmoney(8000)
                bufferconstantnumberstring(STR_VAR_1, 8000)
            case 4:
                checkconstantmoney(12000)
                bufferconstantnumberstring(STR_VAR_1, 12000)
            case 5:
                checkconstantmoney(16000)
                bufferconstantnumberstring(STR_VAR_1, 16000)
            case 6:
                checkconstantmoney(20000)
                bufferconstantnumberstring(STR_VAR_1, 20000)
            default:
                checkconstantmoney(24000)
                bufferconstantnumberstring(STR_VAR_1, 24000)
        }

        if(var(VAR_RESULT) == YES)
        {
            msgbox(format("It's gonna cost you ¥{STR_VAR_1}."), MSGBOX_YESNO)
            if(var(VAR_RESULT) == YES)
            {
                playse(SE_VEND)
                switch(var(VAR_ROGUE_DIFFICULTY))
                {
                    case 0:
                        removeconstantmoney(1000)
                    case 1:
                        removeconstantmoney(2000)
                    case 2:
                        removeconstantmoney(4000)
                    case 3:
                        removeconstantmoney(8000)
                    case 4:
                        removeconstantmoney(12000)
                    case 5:
                        removeconstantmoney(16000)
                    case 6:
                        removeconstantmoney(20000)
                    default:
                        removeconstantmoney(24000)
                }

                call(Common_EventScript_OutOfCenterPartyHeal)
                special(Rogue_OnHealWithNurse)
            }
        }
        else
        {
            msgbox(format("It's gonna cost you ¥{STR_VAR_1}.\nBut you don't even have enough money..."), MSGBOX_DEFAULT)
        }

        hidemoneybox
    }
    else
    {
        msgbox(format("Look kid...\nI'll give you a single free heal. After that you're gonna have to pay."), MSGBOX_DEFAULT)
        msgbox(format("You wanna use your free heal now?"), MSGBOX_YESNO)

        if(var(VAR_RESULT) == YES)
        {
            call(Common_EventScript_OutOfCenterPartyHeal)
            setflag(FLAG_ROGUE_FREE_HEAL_USED)
            special(Rogue_OnHealWithNurse)
        }
    }

    if(var(VAR_RESULT) == YES)
    {
        msgbox(format("What...\nYou're still here?"), MSGBOX_DEFAULT)
    }
    else
    {
        msgbox(format("So thanks for wasting my time I guess..."), MSGBOX_DEFAULT)
    }

    release
}

script Rogue_IsGlitchModeGymLeadersActive
{
    // TODO - Remove this
    setvar(VAR_RESULT, NO)
}

script Rogue_Battle_Trainer
{
    // Can't add any scripts before this
    // the trainer_see/battle_setup code  wants to grab the trainerNum from the very top of the script
    trainerbattle_single(TRAINER_ROGUE_DYNAMIC, gPlaceholder_Trainer_PreBattleTaunt, gPlaceholder_Trainer_PostBattleTaunt)
    msgbox(gPlaceholder_Trainer_PostBattleCloser, MSGBOX_AUTOCLOSE)
}

script Rogue_Battle_Rival
{
    lock
    faceplayer

    special(Rogue_PlayRivalTrainerEncounterBGM)

    buffertrainername(STR_VAR_1, TRAINER_ROGUE_DYNAMIC)
    //msgbox(gPlaceholder_Trainer_PreBattleOpenning)

    msgbox(gPlaceholder_Trainer_PreBattleTaunt)
    trainerbattle(TRAINER_BATTLE_SINGLE_NO_INTRO_TEXT, TRAINER_ROGUE_DYNAMIC, 0, gPlaceholder_Trainer_PostBattleTaunt)
    
    special(Rogue_PlayRivalTrainerEncounterBGM)
    msgbox(gPlaceholder_Trainer_PostBattleCloser)

    playse(SE_EXIT)
    removeobject(VAR_LAST_TALKED)
    setflag(FLAG_ROGUE_RIVAL_DISABLED)

    call(Rogue_EventScript_AttemptPostRivalHeal)
    fadedefaultbgm

    release
}

script Rogue_Battle_TeamBoss
{
    lock
    faceplayer

    buffertrainername(STR_VAR_1, TRAINER_ROGUE_DYNAMIC)
    msgbox(gPlaceholder_Trainer_PreBattleOpenning)

    special(Rogue_PlayTeamBossTrainerEncounterBGM)
    call(Rogue_SetDesiredWeather)

    msgbox(gPlaceholder_Trainer_PreBattleTaunt)
    trainerbattle(TRAINER_BATTLE_SINGLE_NO_INTRO_TEXT, TRAINER_ROGUE_DYNAMIC, 0, gPlaceholder_Trainer_PostBattleTaunt)

    call(Rogue_ClearWeather)
    msgbox(gPlaceholder_Trainer_PostBattleCloser)

    quest_trigger(QUEST_TRIGGER_MAP_SPECIFIC_EVENT)

    playse(SE_EXIT)
    removeobject(VAR_LAST_TALKED)
    setflag(FLAG_ROGUE_TEAM_BOSS_DISABLED)

    call(Rogue_EventScript_AttemptTeamBossHeal)
    fadedefaultbgm

    release
}


// Item Blocks
//
script Rogue_Give_RareCandy
{
    setvar(VAR_ITEM_ID_VAL, ITEM_RARE_CANDY)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_MasterBall
{
    setvar(VAR_ITEM_ID_VAL, ITEM_MASTER_BALL)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item0
{
    setvar(VAR_ITEM_INDEX, 0)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM0)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item1
{
    setvar(VAR_ITEM_INDEX, 1)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM1)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item2
{
    setvar(VAR_ITEM_INDEX, 2)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM2)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item3
{
    setvar(VAR_ITEM_INDEX, 3)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM3)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item4
{
    setvar(VAR_ITEM_INDEX, 4)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM4)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item5
{
    setvar(VAR_ITEM_INDEX, 5)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM5)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item6
{
    setvar(VAR_ITEM_INDEX, 6)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM6)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item7
{
    setvar(VAR_ITEM_INDEX, 7)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM7)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item8
{
    setvar(VAR_ITEM_INDEX, 8)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM8)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item9
{
    setvar(VAR_ITEM_INDEX, 9)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM9)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item10
{
    setvar(VAR_ITEM_INDEX, 10)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM10)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item11
{
    setvar(VAR_ITEM_INDEX, 11)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM11)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item12
{
    setvar(VAR_ITEM_INDEX, 12)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM12)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item13
{
    setvar(VAR_ITEM_INDEX, 13)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM13)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item14
{
    setvar(VAR_ITEM_INDEX, 14)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM14)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item15
{
    setvar(VAR_ITEM_INDEX, 15)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM15)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item16
{
    setvar(VAR_ITEM_INDEX, 16)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM16)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item17
{
    setvar(VAR_ITEM_INDEX, 17)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM17)
    call(Rogue_GiveItem_Internal)
}

script Rogue_Give_Item18
{
    setvar(VAR_ITEM_INDEX, 18)
    copyvar(VAR_ITEM_ID_VAL, VAR_ROGUE_ITEM18)
    call(Rogue_GiveItem_Internal)
}
